[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dPCA",
    "section": "",
    "text": "pip install dynamicPCA\nVisit the homepage for documentation and example usecases."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "dPCA",
    "section": "How to use",
    "text": "How to use\n\nfrom dPCA.TEP import *\nfrom dPCA.analysis import *\n\n\nTEP = GetTEP()\n\n\nanalysis = Analysis(TEP,10)\n\n\nanalysis.show_plots()"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Analysis",
    "section": "",
    "text": "TEP = GetTEP(); TEP.head()\n\n\n\n\n\n  \n    \n      Name\n      A Feed\n      D Feed\n      E Feed\n      A and C feed\n      Recycle flow\n      Reactor feed rate\n      Reactor pressure\n      Reactor level\n      Reactor temperature\n      Purge rate\n      ...\n      A feed flow\n      A and C feed flow\n      Compressor recycle valve\n      Purge valve\n      Separator pot liquid flow\n      Stripper liquid product flow\n      Stripper steam valve\n      Reactor cooling water flow\n      Condenser cooling water flow\n      Agitator speed\n    \n  \n  \n    \n      0\n      0.24889\n      3702.3\n      4502.7\n      9.4170\n      26.996\n      42.183\n      2705.2\n      75.173\n      120.40\n      0.33611\n      ...\n      54.059\n      24.804\n      63.269\n      21.950\n      40.188\n      39.461\n      47.000\n      47.594\n      41.384\n      18.905\n    \n    \n      1\n      0.24904\n      3666.2\n      4526.0\n      9.2682\n      26.710\n      42.332\n      2705.5\n      74.411\n      120.41\n      0.33676\n      ...\n      53.781\n      24.790\n      62.171\n      22.239\n      40.108\n      43.710\n      46.128\n      47.508\n      41.658\n      18.976\n    \n    \n      2\n      0.25034\n      3673.3\n      4501.3\n      9.4212\n      26.842\n      42.360\n      2705.3\n      75.125\n      120.41\n      0.33739\n      ...\n      54.075\n      24.669\n      61.585\n      22.191\n      40.030\n      39.480\n      44.121\n      47.612\n      41.721\n      16.562\n    \n    \n      3\n      0.25109\n      3657.8\n      4497.8\n      9.3792\n      26.528\n      41.982\n      2707.3\n      73.992\n      120.38\n      0.33664\n      ...\n      54.117\n      24.595\n      61.561\n      21.959\n      40.121\n      32.848\n      45.858\n      47.459\n      40.836\n      20.094\n    \n    \n      4\n      0.24563\n      3698.0\n      4537.4\n      9.3746\n      26.736\n      42.354\n      2705.3\n      75.283\n      120.42\n      0.32521\n      ...\n      53.906\n      24.451\n      61.388\n      22.271\n      39.538\n      36.682\n      45.753\n      47.458\n      41.727\n      18.330\n    \n  \n\n5 rows × 52 columns\n\n\n\n\nsource\n\nACM_analysis\n\n ACM_analysis (X:pandas.core.frame.DataFrame, lag:int)\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nRaw data to perform analysis on\n\n\nlag\nint\nNumber of lags to investigate\n\n\nReturns\ndict\nDict with eigenvalues\n\n\n\n\nsource\n\n\nPACM_analysis\n\n PACM_analysis (X:pandas.core.frame.DataFrame, lag:int)\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nRaw data to perform analysis on\n\n\nlag\nint\nNumber of lags to investigate\n\n\nReturns\ndict\nDict with eigenvalues\n\n\n\n\nsource\n\n\nAnalysis\n\n Analysis (X, lag)\n\nInitialize self. See help(type(self)) for accurate signature.\n\ntest = Analysis(TEP,15)\n\n\ntest.show_plots()\n\n\n\n\nTo check the eigenvalues for a given pair we can simply access the matrix and display the first eigenvector which has been sorted to correspond to the largest eigenvalue:\n\ntest.PACM['EigenVectors',15][0]\n\narray([-3.53665965e-02,  9.91247845e-02,  1.48473068e-01,  1.48473068e-01,\n       -7.78141954e-02, -7.78141954e-02, -1.18819213e-01, -1.18819213e-01,\n        1.46763021e-01,  1.46763021e-01, -2.72832315e-02, -2.72832315e-02,\n        1.71289600e-02,  1.71289600e-02,  1.24926467e-01,  1.24926467e-01,\n       -1.61051399e-01, -1.61051399e-01, -2.85690998e-01, -2.85690998e-01,\n       -4.29317663e-01,  9.09143716e-02,  1.75729524e-01,  1.75729524e-01,\n        3.34182238e-01,  3.34182238e-01, -1.36434720e-01, -1.36434720e-01,\n        4.48605229e-01,  4.48605229e-01,  2.58924861e-02,  2.58924861e-02,\n        9.55567158e-03,  4.99279556e-02,  4.99279556e-02, -4.30792202e-01,\n        4.43065546e-01,  4.43065546e-01,  5.03627719e-01,  5.03627719e-01,\n        1.60398868e-01,  1.60398868e-01,  3.08507125e-01,  3.08507125e-01,\n        8.13763194e-02,  8.13763194e-02,  4.71123697e-02,  4.71123697e-02,\n        4.08169775e-02, -4.87651437e-02,  3.38536505e-04, -2.44402708e-03])"
  },
  {
    "objectID": "tep.html",
    "href": "tep.html",
    "title": "Tennesee Eastman Process Data",
    "section": "",
    "text": "from dPCA.lag import *\nfrom dPCA.corrmat import *\n\nWe are now going to try and automate the analysis of PACM and ACM by simply utilising loops and eigenvalues. First however we are going to bring in some data from the Tennesee Eastman Process (TEP).\n\nfilepath = 'https://github.com/waterboy96/TEPData/blob/1ac08a54cb9d420ff4bc0c3f0076ca06dc2ec7e4/TEP.csv?raw=true'\n\n\nTEP = pd.read_csv(filepath, index_col = [0]); TEP.head()\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      ...\n      42\n      43\n      44\n      45\n      46\n      47\n      48\n      49\n      50\n      51\n    \n  \n  \n    \n      0\n      0.24889\n      3702.3\n      4502.7\n      9.4170\n      26.996\n      42.183\n      2705.2\n      75.173\n      120.40\n      0.33611\n      ...\n      54.059\n      24.804\n      63.269\n      21.950\n      40.188\n      39.461\n      47.000\n      47.594\n      41.384\n      18.905\n    \n    \n      1\n      0.24904\n      3666.2\n      4526.0\n      9.2682\n      26.710\n      42.332\n      2705.5\n      74.411\n      120.41\n      0.33676\n      ...\n      53.781\n      24.790\n      62.171\n      22.239\n      40.108\n      43.710\n      46.128\n      47.508\n      41.658\n      18.976\n    \n    \n      2\n      0.25034\n      3673.3\n      4501.3\n      9.4212\n      26.842\n      42.360\n      2705.3\n      75.125\n      120.41\n      0.33739\n      ...\n      54.075\n      24.669\n      61.585\n      22.191\n      40.030\n      39.480\n      44.121\n      47.612\n      41.721\n      16.562\n    \n    \n      3\n      0.25109\n      3657.8\n      4497.8\n      9.3792\n      26.528\n      41.982\n      2707.3\n      73.992\n      120.38\n      0.33664\n      ...\n      54.117\n      24.595\n      61.561\n      21.959\n      40.121\n      32.848\n      45.858\n      47.459\n      40.836\n      20.094\n    \n    \n      4\n      0.24563\n      3698.0\n      4537.4\n      9.3746\n      26.736\n      42.354\n      2705.3\n      75.283\n      120.42\n      0.32521\n      ...\n      53.906\n      24.451\n      61.388\n      22.271\n      39.538\n      36.682\n      45.753\n      47.458\n      41.727\n      18.330\n    \n  \n\n5 rows × 52 columns\n\n\n\n\nnamepath = 'https://github.com/waterboy96/TEPData/blob/main/TEPnames.xlsx?raw=true'\n\n\nnames = pd.read_excel(namepath, index_col = [0], header = None); names.head()\n\n\n\n\n\n  \n    \n      \n      1\n      2\n      3\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n      ...\n      43\n      44\n      45\n      46\n      47\n      48\n      49\n      50\n      51\n      52\n    \n    \n      0\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Type\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      ...\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n    \n    \n      Subtype\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      Continuous\n      ...\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n      Manipulated\n    \n    \n      Block\n      Feed\n      Feed\n      Feed\n      Feed\n      Feed\n      Feed\n      Reactor\n      Reactor\n      Reactor\n      Separator\n      ...\n      Feed\n      Feed\n      Compressor\n      Separator\n      Separator\n      Stripper\n      Stripper\n      Reactor\n      Stripper\n      Reactor\n    \n    \n      Name\n      A Feed\n      D Feed\n      E Feed\n      A and C feed\n      Recycle flow\n      Reactor feed rate\n      Reactor pressure\n      Reactor level\n      Reactor temperature\n      Purge rate\n      ...\n      A feed flow\n      A and C feed flow\n      Compressor recycle valve\n      Purge valve\n      Separator pot liquid flow\n      Stripper liquid product flow\n      Stripper steam valve\n      Reactor cooling water flow\n      Condenser cooling water flow\n      Agitator speed\n    \n  \n\n4 rows × 52 columns\n\n\n\n\nTEP.columns = names.loc['Name']; TEP.head()\n\n\n\n\n\n  \n    \n      Name\n      A Feed\n      D Feed\n      E Feed\n      A and C feed\n      Recycle flow\n      Reactor feed rate\n      Reactor pressure\n      Reactor level\n      Reactor temperature\n      Purge rate\n      ...\n      A feed flow\n      A and C feed flow\n      Compressor recycle valve\n      Purge valve\n      Separator pot liquid flow\n      Stripper liquid product flow\n      Stripper steam valve\n      Reactor cooling water flow\n      Condenser cooling water flow\n      Agitator speed\n    \n  \n  \n    \n      0\n      0.24889\n      3702.3\n      4502.7\n      9.4170\n      26.996\n      42.183\n      2705.2\n      75.173\n      120.40\n      0.33611\n      ...\n      54.059\n      24.804\n      63.269\n      21.950\n      40.188\n      39.461\n      47.000\n      47.594\n      41.384\n      18.905\n    \n    \n      1\n      0.24904\n      3666.2\n      4526.0\n      9.2682\n      26.710\n      42.332\n      2705.5\n      74.411\n      120.41\n      0.33676\n      ...\n      53.781\n      24.790\n      62.171\n      22.239\n      40.108\n      43.710\n      46.128\n      47.508\n      41.658\n      18.976\n    \n    \n      2\n      0.25034\n      3673.3\n      4501.3\n      9.4212\n      26.842\n      42.360\n      2705.3\n      75.125\n      120.41\n      0.33739\n      ...\n      54.075\n      24.669\n      61.585\n      22.191\n      40.030\n      39.480\n      44.121\n      47.612\n      41.721\n      16.562\n    \n    \n      3\n      0.25109\n      3657.8\n      4497.8\n      9.3792\n      26.528\n      41.982\n      2707.3\n      73.992\n      120.38\n      0.33664\n      ...\n      54.117\n      24.595\n      61.561\n      21.959\n      40.121\n      32.848\n      45.858\n      47.459\n      40.836\n      20.094\n    \n    \n      4\n      0.24563\n      3698.0\n      4537.4\n      9.3746\n      26.736\n      42.354\n      2705.3\n      75.283\n      120.42\n      0.32521\n      ...\n      53.906\n      24.451\n      61.388\n      22.271\n      39.538\n      36.682\n      45.753\n      47.458\n      41.727\n      18.330\n    \n  \n\n5 rows × 52 columns\n\n\n\n\nsource\n\nGetTEP\n\n GetTEP ()\n\n\nTEP = GetTEP()\n\n\nTEP\n\n\n\n\n\n  \n    \n      Name\n      A Feed\n      D Feed\n      E Feed\n      A and C feed\n      Recycle flow\n      Reactor feed rate\n      Reactor pressure\n      Reactor level\n      Reactor temperature\n      Purge rate\n      ...\n      A feed flow\n      A and C feed flow\n      Compressor recycle valve\n      Purge valve\n      Separator pot liquid flow\n      Stripper liquid product flow\n      Stripper steam valve\n      Reactor cooling water flow\n      Condenser cooling water flow\n      Agitator speed\n    \n  \n  \n    \n      0\n      0.24889\n      3702.3\n      4502.7\n      9.4170\n      26.996\n      42.183\n      2705.2\n      75.173\n      120.40\n      0.33611\n      ...\n      54.059\n      24.804\n      63.269\n      21.950\n      40.188\n      39.461\n      47.000\n      47.594\n      41.384\n      18.905\n    \n    \n      1\n      0.24904\n      3666.2\n      4526.0\n      9.2682\n      26.710\n      42.332\n      2705.5\n      74.411\n      120.41\n      0.33676\n      ...\n      53.781\n      24.790\n      62.171\n      22.239\n      40.108\n      43.710\n      46.128\n      47.508\n      41.658\n      18.976\n    \n    \n      2\n      0.25034\n      3673.3\n      4501.3\n      9.4212\n      26.842\n      42.360\n      2705.3\n      75.125\n      120.41\n      0.33739\n      ...\n      54.075\n      24.669\n      61.585\n      22.191\n      40.030\n      39.480\n      44.121\n      47.612\n      41.721\n      16.562\n    \n    \n      3\n      0.25109\n      3657.8\n      4497.8\n      9.3792\n      26.528\n      41.982\n      2707.3\n      73.992\n      120.38\n      0.33664\n      ...\n      54.117\n      24.595\n      61.561\n      21.959\n      40.121\n      32.848\n      45.858\n      47.459\n      40.836\n      20.094\n    \n    \n      4\n      0.24563\n      3698.0\n      4537.4\n      9.3746\n      26.736\n      42.354\n      2705.3\n      75.283\n      120.42\n      0.32521\n      ...\n      53.906\n      24.451\n      61.388\n      22.271\n      39.538\n      36.682\n      45.753\n      47.458\n      41.727\n      18.330\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      955\n      0.23955\n      3687.2\n      4581.0\n      9.3941\n      26.878\n      42.199\n      2705.2\n      75.573\n      120.41\n      0.33658\n      ...\n      54.571\n      24.129\n      62.237\n      22.005\n      41.145\n      38.419\n      45.451\n      47.510\n      41.466\n      16.998\n    \n    \n      956\n      0.23352\n      3625.4\n      4500.9\n      9.3884\n      26.754\n      42.477\n      2708.3\n      74.372\n      120.41\n      0.33708\n      ...\n      54.741\n      23.006\n      58.477\n      22.337\n      40.351\n      38.657\n      47.279\n      47.567\n      40.971\n      15.621\n    \n    \n      957\n      0.23440\n      3660.3\n      4535.7\n      9.3709\n      27.034\n      42.302\n      2707.3\n      75.292\n      120.40\n      0.34096\n      ...\n      54.324\n      22.919\n      61.946\n      22.227\n      39.877\n      41.288\n      44.007\n      47.338\n      41.891\n      21.744\n    \n    \n      958\n      0.23611\n      3645.0\n      4506.9\n      9.1996\n      26.769\n      42.252\n      2704.2\n      74.956\n      120.38\n      0.35081\n      ...\n      53.732\n      23.630\n      62.816\n      21.982\n      41.638\n      42.218\n      40.647\n      47.266\n      39.813\n      18.826\n    \n    \n      959\n      0.23729\n      3666.8\n      4511.1\n      9.2764\n      26.467\n      42.330\n      2702.0\n      75.270\n      120.41\n      0.34809\n      ...\n      53.682\n      23.514\n      60.518\n      21.642\n      41.970\n      34.258\n      41.110\n      47.165\n      40.500\n      18.353\n    \n  \n\n960 rows × 52 columns"
  },
  {
    "objectID": "lagfunctions.html",
    "href": "lagfunctions.html",
    "title": "Lag functions",
    "section": "",
    "text": "Let’s start out by defining a short multivariate time-series:\n\nX = pd.DataFrame([[2,3,4],[5,6,7],[8,8,6],[9,10,3],[11,4,6]]); X\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      2\n      3\n      4\n    \n    \n      1\n      5\n      6\n      7\n    \n    \n      2\n      8\n      8\n      6\n    \n    \n      3\n      9\n      10\n      3\n    \n    \n      4\n      11\n      4\n      6\n    \n  \n\n\n\n\n\nsource\n\nlag\n\n lag (X:pandas.core.frame.DataFrame, lags:list)\n\nReturn a dataframe with specific lags\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nA pandas dataframe with observations as rows and variables as columns\n\n\nlags\nlist\nA list with the same number of lists as the number of columns of X containing the desired lagged versions desired for the variable in that column\n\n\nReturns\nDataFrame\nA dataframe with the specified lagged variables of X\n\n\n\n\nlags = [[0,1],[0,2],[0,3]]\n\n\nlag(X,lags)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n    \n      \n      t\n      t-1\n      t\n      t-2\n      t\n      t-3\n    \n  \n  \n    \n      3\n      9\n      8.0\n      10\n      6.0\n      3\n      4.0\n    \n    \n      4\n      11\n      9.0\n      4\n      8.0\n      6\n      7.0\n    \n  \n\n\n\n\n\nsource\n\n\nlag_uniform\n\n lag_uniform (X:pandas.core.frame.DataFrame, lag:int)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nA pandas dataframe with observations as rows and variables as columns\n\n\nlag\nint\nInteger of the maximum lag to include for all variables of X\n\n\nReturns\nDataFrame\nA dataframe with the lagged variables of X\n\n\n\n\nlag_uniform(X,2)\n\n\n\n\n\n  \n    \n      Variable\n      0\n      1\n      2\n      0\n      1\n      2\n      0\n      1\n      2\n    \n    \n      Time\n      t\n      t\n      t\n      t-1\n      t-1\n      t-1\n      t-2\n      t-2\n      t-2\n    \n  \n  \n    \n      0\n      8\n      8\n      6\n      5\n      6\n      7\n      2\n      3\n      4\n    \n    \n      1\n      9\n      10\n      3\n      8\n      8\n      6\n      5\n      6\n      7\n    \n    \n      2\n      11\n      4\n      6\n      9\n      10\n      3\n      8\n      8\n      6"
  },
  {
    "objectID": "correlation_matrices.html",
    "href": "correlation_matrices.html",
    "title": "Auto- and Partial Autocorrelation Matrices",
    "section": "",
    "text": "X = pd.DataFrame([[2,3,4],[5,6,7],[8,8,6],[9,10,3],[11,4,6]]); X\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      2\n      3\n      4\n    \n    \n      1\n      5\n      6\n      7\n    \n    \n      2\n      8\n      8\n      6\n    \n    \n      3\n      9\n      10\n      3\n    \n    \n      4\n      11\n      4\n      6\n    \n  \n\n\n\n\n\nlag_uniform(X,1)\n\n\n\n\n\n  \n    \n      Variable\n      0\n      1\n      2\n      0\n      1\n      2\n    \n    \n      Time\n      t\n      t\n      t\n      t-1\n      t-1\n      t-1\n    \n  \n  \n    \n      0\n      5\n      6\n      7\n      2\n      3\n      4\n    \n    \n      1\n      8\n      8\n      6\n      5\n      6\n      7\n    \n    \n      2\n      9\n      10\n      3\n      8\n      8\n      6\n    \n    \n      3\n      11\n      4\n      6\n      9\n      10\n      3\n    \n  \n\n\n\n\nHere we define the so-called imposter matrix, which will be used for comparing correlation matrices against randomly shuffled ones to determine when a correlation is better than a random one.\n\nsource\n\nimposter_matrix\n\n imposter_matrix (X:pandas.core.frame.DataFrame, random_state=42)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nX\nDataFrame\n\nMatrix to be randomized\n\n\nrandom_state\nint\n42\nRandom state to be used\n\n\nReturns\nDataFrame\n\nThe input matrix with shuffled values for each column\n\n\n\n\nimposter_matrix(X)\n\n\n\n\n\n  \n    \n      \n      0\n      1\n      2\n    \n  \n  \n    \n      0\n      5\n      6\n      7\n    \n    \n      1\n      11\n      4\n      6\n    \n    \n      2\n      8\n      8\n      6\n    \n    \n      3\n      2\n      3\n      4\n    \n    \n      4\n      9\n      10\n      3\n    \n  \n\n\n\n\n\nsource\n\n\ncorrelation_matrix\n\n correlation_matrix (X:pandas.core.frame.DataFrame,\n                     y:pandas.core.frame.DataFrame)\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nMatrix 1 for calculating the correlation matrix\n\n\ny\nDataFrame\nMatrix 2 for calculating the correlation matrix\n\n\nReturns\nndarray\nCorrelation matrix as a Numpy array\n\n\n\n\ncorrelation_matrix(X,X)\n\narray([[ 1.        ,  0.41978508,  0.0860663 ],\n       [ 0.41978508,  1.        , -0.27628324],\n       [ 0.0860663 , -0.27628324,  1.        ]])\n\n\n\nsource\n\n\nACM\n\n ACM (X:pandas.core.frame.DataFrame, lag:int)\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nDataframe of raw data for which to calculate the ACM\n\n\nlag\nint\nLag to calculate correlation against\n\n\nReturns\nDataFrame\nAutocorrelation Matrix (ACM)\n\n\n\n\nACM(X,2)\n\n\n\n\n\n  \n    \n      \n      \n      0\n      1\n      2\n    \n    \n      \n      \n      t\n      t\n      t\n    \n  \n  \n    \n      0\n      t-2\n      0.981981\n      0.953821\n      0.500000\n    \n    \n      1\n      t-2\n      -0.654654\n      -0.563621\n      0.142857\n    \n    \n      2\n      t-2\n      0.000000\n      -0.114708\n      -0.755929\n    \n  \n\n\n\n\n\nsource\n\n\npartial_correlation_matrix\n\n partial_correlation_matrix (X:pandas.core.frame.DataFrame)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nMatrix for calculating partial correlation\n\n\nReturns\nndarray\nPartial correlation matrix as a Numpy array\n\n\n\n\npartial_correlation_matrix(X)\n\narray([[ 1.        ,  0.46324708,  0.23162552],\n       [ 0.46324708,  1.        , -0.34549142],\n       [ 0.23162552, -0.34549142,  1.        ]])\n\n\n\nsource\n\n\nPACM\n\n PACM (X:pandas.core.frame.DataFrame, lag:int)\n\n\n\n\n\nType\nDetails\n\n\n\n\nX\nDataFrame\nMatrix for calculating partial autocorrelation\n\n\nlag\nint\nLag to calculate partial correlation against\n\n\n\n\nPACM(X,2)\n\n\n\n\n\n  \n    \n      \n      Variable\n      0\n      1\n      2\n    \n    \n      \n      Time\n      t\n      t\n      t\n    \n    \n      Variable\n      Time\n      \n      \n      \n    \n  \n  \n    \n      0\n      t-2\n      -0.807661\n      -0.109185\n      0.375985\n    \n    \n      1\n      t-2\n      -0.606224\n      -0.387828\n      0.624375\n    \n    \n      2\n      t-2\n      0.018772\n      -0.876408\n      0.974483"
  }
]